#!/usr/bin/env bash
packaging_path=`pwd`
git_repo='https://github.com/persepolisdm/persepolis.git'
venv_dir='venv'
error_color='\033[1;31m✗'
warn_color='\033[1;33m▶︎'
success_color='\033[1;32m✔︎'
reset_color='\033[0m'
default_aria_url='https://github.com/aria2/aria2/releases/download/release-1.35.0/aria2-1.35.0-osx-darwin.tar.bz2'

error_msg() {
    echo -e "$error_color $1$reset_color"; exit 1;
}
warn_msg() {
    echo -e "$warn_color $1$reset_color";
}
success_msg() {
    echo -e "$success_color $1$reset_color";
}

clean_build_files () {
    warn_msg 'Removing {persepolis, dist, build} directories'
    if [[ -d 'persepolis' ]] ; then
        warn_msg "persepolis directory (git cloned dir) exist, Are you sure to remove it? [y/Y]"
        read ans
        if [[ ($ans == 'y') || ($ans == 'Y') ]]; then
            rm -rf persepolis
        fi
    fi
    rm -rf dist/dmg dist build
    if [ "$1" = "include_spec_file" ]; then
        warn_msg 'remove .spec file'
        rm 'Persepolis Download Manager.spec'
    fi
}

download_aria() {
    warn_msg "downloading aria2c..."
    aria_path='temp_aria_dic'
    mkdir $aria_path \
    && wget \
        $(wget -qO - https://api.github.com/repos/aria2/aria2/releases/latest \
        | egrep '\"browser_download_url\".*osx-darwin\.tar\.bz2\"' \
        | cut -d'"' -f 4) -O - \
        | tar -xj -C $aria_path --strip-components 1 \
    || wget $default_aria_url -O - | tar -xj -C $aria_path --strip-components 1 \
    && [ -f ./$aria_path/bin/aria2c ] \
    && cp ./$aria_path/bin/aria2c $packaging_path/ \
    && rm -rf $aria_path
    if [[ $? -ne 0 ]]; then
        error_msg 'downloading aria2 is failed, check connection.'
    else
        success_msg 'aria2 downloaded'
    fi
}

download_ffmpeg() {
    warn_msg "downloading ffmpeg"
    wget --trust-server-names https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip -O ffmpeg.zip && unzip -o ffmpeg.zip && rm ffmpeg.zip
    if [[ $? -ne 0 ]]; then
        error_msg 'downloading ffmpeg is failed, check connection'
    else
        success_msg 'ffmpeg downloaded'
    fi
}

update_dependencies() {
    warn_msg "Do you want update all dependencies? [y/Y]"
    read ans
    if [[ ($ans == 'y') || ($ans == 'Y') ]]; then
        pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
        if [[ $? -ne 0 ]]; then
            error_msg 'updating dependencies failed'
        else
            success_msg 'all dependencies was successfully updated'
        fi
    fi
}

check_installed_createdmg() {
    warn_msg "Do you want install create-dmg with homebrew? [y/Y]"
    read ans
    if [[ ($ans == 'y') || ($ans == 'Y') ]]; then
        brew install create-dmg
        if [[ $? -ne 0 ]]; then
            error_msg 'installing create-dmg failed'
        else
            success_msg 'create-dmg was successfully installed'
        fi
    fi
}

build_dmg_installer(){
    mkdir -p dist/dmg
    mv 'Persepolis Download Manager.app' dist/dmg 
    test -f "dist/Persepolis Download Manager.dmg" && rm "dist/Persepolis Download Manager.dmg"
    create-dmg \
        --volname "Persepolis Download Manager" \
        --volicon "icon.icns" \
        --window-pos 200 120 \
        --window-size 600 300 \
        --icon-size 100 \
        --icon "Persepolis Download Manager.app" 120 120 \
        --hide-extension "Persepolis Download Manager.app" \
        --app-drop-link 425 120 \
        "Persepolis Download Manager.dmg" \
        "dist/dmg/"
}

while getopts ":a:v:h" o; do
    case "$o" in
        a)
            grep -q '\.git$' <<< ${OPTARG} && git_repo=${OPTARG}
            ;;
        v)
            venv_dir=${OPTARG}
            ;;
        h)
            echo "Usage: $0 [ -a $git_repo -v virtualenv_dir_name ]" 1>&2; exit 1;
            ;;
    esac
done
shift $((OPTIND-1))

cd "$packaging_path"

if [[ ! (-d "$venv_dir") ]] ; then
    which virtualenv
    if [[ $? -ne 0 ]]; then
        error_msg 'You must install virtualenv!'
    fi
    virtualenv -p python3 "$venv_dir"
    if [[ $? -ne 0 ]]; then
        rm -rf "$venv_dir"
        echo $venv_dir
        error_msg 'Virtualenv creation failed!'
    fi
    success_msg 'Virtualenv directory created'
fi

source "./$venv_dir/bin/activate"
pip install -r ./requirements.txt
if [[ $? -ne 0 ]]; then
    error_msg 'Resolving python dependency failed'
else
    success_msg 'Python dependecy installed'
fi

update_dependencies
clean_build_files

[[ ! (-d './persepolis') ]] && git clone "$git_repo" persepolis && success_msg "$git_repo cloned"

find persepolis/persepolis -type f -exec perl -i -pe 's/persepolis.scripts/scripts/g' '{}' \;
find persepolis/persepolis -type f -exec perl -i -pe 's/persepolis.gui/gui/g' '{}' \;

pyinstaller --hidden-import pkg_resources.py2_warn 'persepolis/persepolis/__main__.py' -w -i icon.icns -p persepolis/persepolis -n 'Persepolis Download Manager'

download_aria
[ -d './dist' ] && cp aria2c 'dist/Persepolis Download Manager.app/Contents/MacOS/' && success_msg 'aria2c is added to package'
download_ffmpeg
[ -d './dist' ] && cp ffmpeg 'dist/Persepolis Download Manager.app/Contents/MacOS/' && success_msg 'ffmpeg is added to package'
# [ -d './dist' ] && cp Info.plist 'dist/Persepolis Download Manager.app/Contents/'   && success_msg 'Info.plist added to package'
[ -d './Persepolis Download Manager.app' ] && [ -d './dist' ] && rm -rf 'Persepolis Download Manager.app'
[ -d './dist' ] && mv 'dist/Persepolis Download Manager.app' .  && success_msg 'final package moving to root directory'

check_installed_createdmg
build_dmg_installer

clean_build_files include_spec_file
